!function(e){var t={};function n(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(o,l,function(t){return e[t]}.bind(null,l));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=o(n(2));(()=>{const e=document.createElement("template");e.innerHTML="\n    <div id='sac-app-redesign_container'></div>\n    ";class t extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"}),this._shadowRoot.appendChild(e.content.cloneNode(!0)),this.initComponents()}initComponents(){new l.default({target:this._shadowRoot.getElementById("sac-app-redesign_container")})}}customElements.define("sac-app-redesign",t)})()},,function(e,t,n){"use strict";function o(){}n.r(t);function l(e){return e()}function r(){return Object.create(null)}function c(e){e.forEach(l)}function a(e){return"function"==typeof e}function u(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}new Set;function s(e,t){e.appendChild(t)}function i(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function f(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function g(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function b(){return p(" ")}function h(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function m(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function v(e,t){t=""+t,e.data!==t&&(e.data=t)}function _(e,t,n,o){e.style.setProperty(t,n,o?"important":"")}function y(e,t){for(let n=0;n<e.options.length;n+=1){const o=e.options[n];if(o.__value===t)return void(o.selected=!0)}}function C(e){const t=e.querySelector(":checked")||e.options[0];return t&&t.__value}let w;function k(e){w=e}const x=[],$=[],E=[],S=[],O=Promise.resolve();let M=!1;function T(){M||(M=!0,O.then(B))}function j(e){E.push(e)}const N=new Set;function B(){do{for(;x.length;){const e=x.shift();k(e),P(e.$$)}for(;$.length;)$.pop()();for(let e=0;e<E.length;e+=1){const t=E[e];N.has(t)||(N.add(t),t())}E.length=0}while(x.length);for(;S.length;)S.pop()();M=!1,N.clear()}function P(e){if(null!==e.fragment){e.update(),c(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(j)}}const I=new Set;function L(e,t){e&&e.i&&(I.delete(e),e.i(t))}"undefined"!=typeof window?window:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let q;function A(e,t){const n=e.$$;null!==n.fragment&&(c(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function H(e,t,n,u,s,i,d=[-1]){const f=w;k(e);const g=t.props||{},p=e.$$={fragment:null,ctx:null,props:i,update:o,not_equal:s,bound:r(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:r(),dirty:d};let b=!1;var h;p.ctx=n?n(e,g,(t,n,...o)=>{const l=o.length?o[0]:n;return p.ctx&&s(p.ctx[t],p.ctx[t]=l)&&(p.bound[t]&&p.bound[t](l),b&&function(e,t){-1===e.$$.dirty[0]&&(x.push(e),T(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n}):[],p.update(),b=!0,c(p.before_update),p.fragment=!!u&&u(p.ctx),t.target&&(t.hydrate?p.fragment&&p.fragment.l((h=t.target,Array.from(h.childNodes))):p.fragment&&p.fragment.c(),t.intro&&L(e.$$.fragment),function(e,t,n){const{fragment:o,on_mount:r,on_destroy:u,after_update:s}=e.$$;o&&o.m(t,n),j(()=>{const t=r.map(l).filter(a);u?u.push(...t):c(t),e.$$.on_mount=[]}),s.forEach(j)}(e,t.target,t.anchor),B()),k(f)}"function"==typeof HTMLElement&&(q=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,n){this[e]=n}$destroy(){A(this,1),this.$destroy=o}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(){}});class U{$destroy(){A(this,1),this.$destroy=o}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(){}}function R(e,t,n){const o=e.slice();return o[21]=t[n],o}function D(e,t,n){const o=e.slice();return o[21]=t[n],o}function W(e){let t,n,l,r=e[21].name+"";return{c(){t=g("option"),n=p(r),t.__value=l=e[21].value,t.value=t.__value,_(t,"background",e[21].value),_(t,"color",e[21].dropColor)},m(e,o){i(e,t,o),s(t,n)},p:o,d(e){e&&d(t)}}}function X(e){let t,n,l,r=e[21].name+"";return{c(){t=g("option"),n=p(r),t.__value=l=e[21].value,t.value=t.__value,_(t,"background",e[21].value),_(t,"color",e[21].dropColor)},m(e,o){i(e,t,o),s(t,n)},p:o,d(e){e&&d(t)}}}function Y(e){let t,n,l,r,a,u,_,C,w,k,x,$,E,S,O,M,T,N,B,P,I,L,q,A,H,U,Y,z,F,G,J,K,Q,V,Z,ee,te,ne,oe,le,re,ce,ae=e[4].x+"",ue=e[4].y+"",se=e[5],ie=[];for(let t=0;t<se.length;t+=1)ie[t]=W(D(e,se,t));let de=e[5],fe=[];for(let t=0;t<de.length;t+=1)fe[t]=X(R(e,de,t));return{c(){t=g("div"),n=p("Clicked at "),l=p(ae),r=p(" x "),a=p(ue),u=p(".\n\n"),_=g("select"),C=g("option"),C.textContent="row 1 / col. 1",w=g("option"),w.textContent="row 1 / col. 2",k=g("option"),k.textContent="row 2 / col. 1",x=g("option"),x.textContent="row 2 / col. 2",$=g("option"),$.textContent="upper row",E=g("option"),E.textContent="lower row",S=g("option"),S.textContent="left column",O=g("option"),O.textContent="right column",M=g("option"),M.textContent="complete chart",T=b(),N=g("select");for(let e=0;e<ie.length;e+=1)ie[e].c();B=b(),P=g("select");for(let e=0;e<fe.length;e+=1)fe[e].c();I=b(),L=g("div"),q=g("p"),q.textContent="Modify color of",A=b(),H=g("label"),U=g("input"),z=p("\n\tbackground"),F=b(),G=g("label"),J=g("input"),Q=p("\n\ttext"),V=b(),Z=g("button"),Z.textContent="Change background",ee=b(),te=g("button"),te.textContent="Change text color",ne=b(),oe=g("button"),oe.textContent="I",le=b(),re=g("button"),re.textContent="B",C.__value="1",C.value=C.__value,w.__value="2",w.value=w.__value,k.__value="3",k.value=k.__value,x.__value="4",x.value=x.__value,$.__value="5",$.value=$.__value,E.__value="6",E.value=E.__value,S.__value="7",S.value=S.__value,O.__value="8",O.value=O.__value,M.__value="9",M.value=M.__value,void 0===e[2]&&j(()=>e[15].call(_)),void 0===e[0]&&j(()=>e[16].call(N)),void 0===e[1]&&j(()=>e[17].call(P)),m(U,"type","radio"),m(U,"name","scopeSelect"),U.__value=Y=0,U.value=U.__value,U.checked="checked",e[19][0].push(U),m(J,"type","radio"),m(J,"name","scopeSelect"),J.__value=K=1,J.value=J.__value,e[19][0].push(J)},m(o,c){i(o,t,c),s(t,n),s(t,l),s(t,r),s(t,a),s(t,u),s(t,_),s(_,C),s(_,w),s(_,k),s(_,x),s(_,$),s(_,E),s(_,S),s(_,O),s(_,M),y(_,e[2]),s(t,T),s(t,N);for(let e=0;e<ie.length;e+=1)ie[e].m(N,null);y(N,e[0]),s(t,B),s(t,P);for(let e=0;e<fe.length;e+=1)fe[e].m(P,null);y(P,e[1]),s(t,I),s(t,L),s(L,q),s(L,A),s(L,H),s(H,U),U.checked=U.__value===e[3],s(H,z),s(L,F),s(L,G),s(G,J),J.checked=J.__value===e[3],s(G,Q),s(t,V),s(t,Z),s(t,ee),s(t,te),s(t,ne),s(t,oe),s(t,le),s(t,re),ce=[h(_,"change",e[15]),h(N,"change",e[16]),h(P,"change",e[17]),h(U,"change",e[18]),h(J,"change",e[20]),h(Z,"click",e[6]),h(te,"click",e[7]),h(oe,"click",e[8](1)),h(re,"click",e[8](2)),h(t,"click",e[9])]},p(e,[t]){if(16&t&&ae!==(ae=e[4].x+"")&&v(l,ae),16&t&&ue!==(ue=e[4].y+"")&&v(a,ue),4&t&&y(_,e[2]),32&t){let n;for(se=e[5],n=0;n<se.length;n+=1){const o=D(e,se,n);ie[n]?ie[n].p(o,t):(ie[n]=W(o),ie[n].c(),ie[n].m(N,null))}for(;n<ie.length;n+=1)ie[n].d(1);ie.length=se.length}if(1&t&&y(N,e[0]),32&t){let n;for(de=e[5],n=0;n<de.length;n+=1){const o=R(e,de,n);fe[n]?fe[n].p(o,t):(fe[n]=X(o),fe[n].c(),fe[n].m(P,null))}for(;n<fe.length;n+=1)fe[n].d(1);fe.length=de.length}2&t&&y(P,e[1]),8&t&&(U.checked=U.__value===e[3]),8&t&&(J.checked=J.__value===e[3])},i:o,o:o,d(n){n&&d(t),f(ie,n),f(fe,n),e[19][0].splice(e[19][0].indexOf(U),1),e[19][0].splice(e[19][0].indexOf(J),1),c(ce)}}}function z(e,t){return"italic"!=e.fontStyle&&1==t?"italic":"italic"==e.fontStyle&&1==t?"":"bold"!=e.fontWeight&&2==t?"bold":"normal"}function F(e,t,n){let o="rgb(255, 255, 255)",l="rgb(0, 0, 0)";const r=[],c=[];let a=[{value:"rgb(255, 255, 255)",name:"white",dropColor:"rgb(0, 0, 0)"},{value:"rgb(211, 211, 211)",name:"light grey",dropColor:"rgb(0, 0, 0)"},{value:"rgb(128, 128, 128)",name:"grey",dropColor:"rgb(0, 0, 0)"},{value:"rgb(48, 48, 48)",name:"dark grey",dropColor:"rgb(255, 255, 255)"},{value:"rgb(0, 0, 0)",name:"black",dropColor:"rgb(255, 255, 255)"},{value:"rgb(255, 255, 0)",name:"yellow",dropColor:"rgb(0, 0, 0)"},{value:"rgb(240, 230, 140)",name:"khaki",dropColor:"rgb(0, 0, 0)"},{value:"rgb(189, 183, 107)",name:"dark khaki",dropColor:"rgb(0, 0, 0)"},{value:"rgb(255, 165, 0)",name:"orange",dropColor:"rgb(0, 0, 0)"},{value:"rgb(255, 69, 0)",name:"orange red",dropColor:"rgb(0, 0, 0)"},{value:"rgb(255, 0, 0)",name:"red",dropColor:"rgb(0, 0, 0)"},{value:"rgb(178, 34, 34)",name:"fire brick",dropColor:"rgb(255, 255, 255)"},{value:"rgb(240, 128, 128)",name:"light coral",dropColor:"rgb(0, 0, 0)"},{value:"rgb(148, 0, 211)",name:"dark violet",dropColor:"rgb(0, 0, 0)"},{value:"rgb(0, 0, 255)",name:"blue",dropColor:"rgb(255, 255, 255)"},{value:"rgb(30, 144, 255)",name:"dodger blue",dropColor:"rgb(0, 0, 0)"},{value:"rgb(0, 255, 127)",name:"spring green",dropColor:"rgb(0, 0, 0)"},{value:"rgb(50, 205, 50)",name:"lime green",dropColor:"rgb(0, 0, 0)"},{value:"rgb(0, 128, 0)",name:"green",dropColor:"rgb(0, 0, 0)"}],u="1",s=1;function i(e,t){1===t?0==s?e.style.background=o:e.style.color=o:2===t?e.style.fontStyle="italic":3===t&&(e.style.fontStyle="bold")}function d(e){const t=document.getElementsByClassName("sapEpmUiControlCrosstabTableInner")[0];for(let n=0;n<t.rows.length;n++){r.push([]),c.push([]);for(let l=0;l<t.rows[n].cells.length;l++)null!=e.target.closest("tr")&&e.target.closest("tr").dataset.row==n&&null!=e.target.closest("td")&&e.target.closest("td").dataset.col==l&&(r[n][l]=t.rows[n].cells[l].style.background,c[n][l]=t.rows[n].cells[l].style.color,"rgb(176, 224, 230)"!=t.rows[n].cells[l].style.background?t.rows[n].cells[l].style.background="rgb(176, 224, 230)":t.rows[n].cells[l].style.background=o)}}let f={x:0,y:0};function g(e){n(4,f.x=e.clientX,f),n(4,f.y=e.clientY,f),d(e)}document.addEventListener("click",g);return[o,l,u,s,f,a,function(){const e=document.getElementsByClassName("sapEpmUiControlCrosstabTableInner")[0];for(let t=0;t<e.rows.length;t++)for(let n=0;n<e.rows[t].cells.length;n++)"rgb(176, 224, 230)"==e.rows[t].cells[n].style.background&&(e.rows[t].cells[n].style.background=o)},function(){const e=document.getElementsByClassName("sapEpmUiControlCrosstabTableInner")[0];for(let t=0;t<e.rows.length;t++)for(let n=0;n<e.rows[t].cells.length;n++)"rgb(176, 224, 230)"==e.rows[t].cells[n].style.background&&(e.rows[t].cells[n].style.color=l),e.rows[t].cells[n].style.background=r[t][n]},function(e){return function(){const t=document.getElementsByClassName("sapEpmUiControlCrosstabTableInner")[0];for(let n=0;n<t.rows.length;n++)for(let o=0;o<t.rows[n].cells.length;o++)"rgb(176, 224, 230)"==t.rows[n].cells[o].style.background&&(t.rows[n].cells[o].style.fontStyle=z(t.rows[n].cells[o].style,e)),t.rows[n].cells[o].style.background=r[n][o]}},g,r,c,i,function(e){return function(){let t=0,o=0;n(2,u=parseInt(u));const l=document.getElementsByTagName("tr");u<=4?(t=function(e){let t=0;return e<=2?t=2:3!==e&&4!==e||(t=3),t}(u),o=function(e){let t=0;return 1===e||3===e?t=1:2!==e&&4!==e||(t=2),t}(u),i(l[t].cells[o],e)):5===u?(i(l[2].cells[1],e),i(l[2].cells[2],e)):6===u?(i(l[3].cells[1],e),i(l[3].cells[2],e)):7===u?(i(l[2].cells[1],e),i(l[3].cells[1],e)):8===u?(i(l[2].cells[2],e),i(l[3].cells[2],e)):(i(l[2].cells[1],e),i(l[2].cells[2],e),i(l[3].cells[1],e),i(l[3].cells[2],e))}},d,function(){u=C(this),n(2,u)},function(){o=C(this),n(0,o),n(5,a)},function(){l=C(this),n(1,l),n(5,a)},function(){s=this.__value,n(3,s)},[[]],function(){s=this.__value,n(3,s)}]}t.default=class extends U{constructor(e){super(),H(this,e,F,Y,u,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,